program lexical_analyzer 
implicit none

! Ключевые слова PHP (добавлены soft keywords и другие)
character(len=10), dimension(18) :: keywords = (/ &
    'if      ', 'else    ', 'while   ', 'return  ', 'int     ', 'float   ', &
    'string  ', 'bool    ', 'function', 'class   ', 'echo    ', 'for     ', &
    'final   ', 'abstract', 'interfac', 'public  ', 'private ', 'protected' /)  ! <--- Добавлены новые ключевые слова

! Операторы PHP (добавлены операторы для интерполяции)
character(len=2), dimension(17) :: operators = (/ &
    '= ', '==', '+ ', '- ', '* ', '/ ', '( ', ') ', '{ ', '} ', '; ', '< ', '> ', '? ', ', ', '${', '{ ' /)  ! <--- Добавлены ${ и {

! ... (остальные объявления остаются без изменений)

subroutine process_identifier(line, i, len_line, name_table, name_table_size, line_number, keywords)
    ! ... (предыдущий код)
    
    ! Проверка на идентификатор, начинающийся с цифры
    if (identifier(1:1) >= '0' .and. identifier(1:1) <= '9') then
        call print_token('ERROR', 'Invalid identifier (starts with digit): ' // identifier, line_number, i - len_trim(identifier), '-')
        return
    end if

    ! Проверка на soft keywords (добавлены новые case)
    do j = 1, size(keywords)
        if (identifier == trim(keywords(j))) then
            select case (trim(keywords(j)))
                case ('final', 'abstract', 'interface', 'public', 'private', 'protected')  ! <--- Soft keywords
                    info_type = 'soft_keyword'
                ! ... (остальные case)
            end select
            ! ... (остальной код)
        end if
    end do
    ! ... (остальной код)
end subroutine process_identifier

subroutine process_string(line, i, len_line, name_table, name_table_size, line_number)
    character(len=200), intent(in) :: line
    integer, intent(inout) :: i
    integer, intent(in) :: len_line
    type(name_table_entry), dimension(100), intent(inout) :: name_table
    integer, intent(inout) :: name_table_size
    integer, intent(in) :: line_number

    character(len=200) :: str
    character(len=10) :: buffer
    integer :: j, k
    character(len=1) :: quote_char
    logical :: escape_mode, interpolation_mode  ! <--- Новые флаги

    str = ''
    j = 0
    quote_char = line(i:i)
    i = i + 1
    escape_mode = .false.
    interpolation_mode = .false.

    do while (i <= len_line)
        ! Обработка интерполяции
        if (.not.escape_mode .and. line(i:i) == '$' .and. i < len_line .and. line(i+1:i+1) == '{') then  ! <--- Интерполяция
            interpolation_mode = .true.
            call print_token('STR', str, line_number, i - len_trim(str), 'string_part')
            i = i + 2
            call process_interpolation(line, i, len_line, line_number)
            str = ''
            j = 0
            cycle
        end if

        ! Обработка escape-последовательностей
        if (escape_mode) then  ! <--- Escape-последовательности
            select case (line(i:i))
                case ('n')
                    str(j:j) = achar(10)  ! LF
                case ('t')
                    str(j:j) = achar(9)   ! TAB
                case ('r')
                    str(j:j) = achar(13)  ! CR
                case ('"', '''', '\', '$')
                    str(j:j) = line(i:i)
                case default
                    call print_token('ERROR', 'Invalid escape: \' // line(i:i), line_number, i, '-')
            end select
            escape_mode = .false.
            i = i + 1
            cycle
        end if

        if (line(i:i) == '\') then
            escape_mode = .true.
            i = i + 1
            cycle
        end if

        if (line(i:i) == quote_char .and. .not.escape_mode) exit

        j = j + 1
        str(j:j) = line(i:i)
        i = i + 1
    end do

    if (i > len_line) then
        call print_token('ERROR', 'Unterminated string', line_number, i, '-')
        return
    end if

    i = i + 1  ! Пропускаем закрывающую кавычку
    
    ! ... (остальной код)
end subroutine process_string

subroutine process_interpolation(line, i, len_line, line_number)
    character(len=200), intent(in) :: line
    integer, intent(inout) :: i
    integer, intent(in) :: len_line
    integer, intent(in) :: line_number

    integer :: bracket_count
    character :: ch

    bracket_count = 1
    call print_token('OP', '${', line_number, i-1, 'interpolation_start')

    do while (i <= len_line .and. bracket_count > 0)
        ch = line(i:i)
        
        ! Обрабатываем вложенные скобки
        if (ch == '{') then
            bracket_count = bracket_count + 1
        else if (ch == '}') then
            bracket_count = bracket_count - 1
        end if

        ! Рекурсивный вызов лексера
        select case (ch)
            case ('A':'Z', 'a':'z', '$')
                call process_identifier(line, i, len_line, name_table, name_table_size, line_number, keywords)
            case ('0':'9')
                call process_constant(line, i, len_line, name_table, name_table_size, line_number)
            case ('=', '+', '-', '*', '/', '(', ')', '{', '}', ';', '<', '>', '?', ',')
                call process_operator(line, i, len_line, line_number, operators)
            case ('"', '''')
                call process_string(line, i, len_line, name_table, name_table_size, line_number)
            case (' ')
                i = i + 1
            case default
                call print_token('ERROR', 'Invalid symbol in interpolation: ' // ch, line_number, i, '-')
                i = i + 1
        end select
    end do

    call print_token('OP', '}', line_number, i, 'interpolation_end')
    i = i + 1
end subroutine process_interpolation

! ... (остальные подпрограммы остаются без изменений)
end program lexical_analyzer

close(10)

! Вывод таблиц
print *, '=== Keywords Table ==='
do i = 1, size(keywords)
    print '(A, I3, A, A)', 'ID:', i, ' Keyword: ', trim(keywords(i))
end do

print *, '=== Operators Table ==='
do i = 1, size(operators)
    print '(A, I3, A, A)', 'ID:', i, ' Operator: ', trim(operators(i))
end do

print *, '=== Identifiers Table ==='
do i = 1, name_table_size
    print '(A, I3, A, A)', 'ID:', name_table(i)%id, ' Name: ', trim(name_table(i)%name)
end do

print *, '=== Constants Table ==='
do i = 1, name_table_size
    if (index(name_table(i)%name, '.') > 0 .or. verify(name_table(i)%name, '0123456789') == 0) then
        print '(A, I3, A, A)', 'ID:', name_table(i)%id, ' Value: ', trim(name_table(i)%name)
    end if
end do

print *, '=== Strings Table ==='
do i = 1, name_table_size
    if (index(name_table(i)%name, '"') > 0 .or. index(name_table(i)%name, "'") > 0) then
        print '(A, I3, A, A)', 'ID:', name_table(i)%id, ' Value: ', trim(name_table(i)%name)
    end if
end do

contains